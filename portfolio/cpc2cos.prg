*** Procedure COSINE
*** extended for mtrx2cos; portfolio analysis. Feb. 2015

select 1
use matrix

delete file temp.dbf
copy stru extended to temp
use temp
delete             && title
skip               && ipc4
delete
pack

select 2
create temp2
append blank
replace field_name with "word"
replace field_len with 25
replace field_type with "c"
append blank
replace field_name with "varlbl"
replace field_len with 10
replace field_type with "c"
create words from temp2

select 1
use temp
go top
do while .not. eof()
   store field_name to vword
   select 2
   append blank
   replace word with vword
   select 1
   skip
enddo

go top
replace all field_len with 10
create mtrxtmp from temp
append from matrix

use temp
replace all field_len with 10
delete file coocc.dbf
create coocc from temp

use temp
replace all field_len with 10
replace all field_dec with 6
delete file cosine.dbf
create cosine from temp
set decimal to 6
use

****
select 2
use coocc
c1 = 1
do while c1 <= fcount()
   append blank
   c1 = c1 + 1
enddo
go top

select 3
use cosine
c1 = 1
do while c1 <= fcount()
   append blank
   c1 = c1 + 1
enddo
go top

*** make totals of squared values
select 1
use mtrxtmp
copy to matrix2
use matrix2
vn = reccount()
append blank
c1 = 1                        && field 1 and 2 were non-numeric in this case.
h1 = 0
h2 = 0
h3 = 0
h4 = 0
h5 = 0
do while c1 <= fcount()
   h = field(c1)
   sum &h to h3
   sum (&h^2) to vh
   if vh = 0
      clear screen
      @ 10,5 SAY "The sumtotal of one of the variables (columns) adds up to zero. "
      @ 11,5 SAY "This can generate problems in the analysis; " 
      @ 12,5 SAY "the program execution is therefore interrupted "
      @ 13,5 SAY "and the results will be incomplete. "
      @ 16,5 SAY "The problem is generated by the variable named " + h
      @ 17,5 SAY "Please, return after correction of the problem in the input file. "
      @ 22,5
      wait
      clear all
      return
   endif
   h3 = h3 / sqrt(vh)        && l1-norm divided by l2-norm
   do case
   case c1 = 1
      h1 = h3				&& v1 and v2 for the Egghe-Leydesdorff threshold
      h4 = h3               && v4 and v5 for the minimum value
   case c1 = 2
      h2 = h3
      h5 = h3
   otherwise
      if h3 > min(h1,h2)
         if h1 = min(h1,h2)
            h1 = h3
         else
            h2 = h3
         endif
      endif
      if h3 < min(h4,h5)
         if h4 = min(h4,h5)
            h5 = h3
         else
            h4 = h3
         endif
      endif
   endcase
** Salton & McGill, 1983, p. 121
** Rousseau, 24 Nov. 2002 explanation
   go bottom
   replace &h with vh
   c1 = c1 + 1
   go top
enddo
vegghe = h1 * h2 / vn
vegghe_min = h4 * h5 / vn

*** make cooccurrence matrix
c1 = 1
c2 = 1
do while c1 <= fcount() 
   vcount = 0
   h1 = field(c1)
   c2 = 1
   do while c2 <= fcount()
      h2 = field(c2)
*     if c1 <> c2                && include diagonal; 15 May 2016
*        count for (&h1 > 0 .and. &h2 > 0) to vcount
**       non-binary case : h1 * h2
         sum (&h1 * &h2) to vcount for recno() < lastrec()
         select 2   
         goto c1
         replace &h2 with vcount
         select 1
*     endif
      vcount = 0
      c2 = c2 + 1
   enddo
   c1 = c1 + 1
enddo

*** compute cosine

select 3
use cosine
select 2
use coocc
go top
c1 = 1
h1 = field(c1)
select 1
use matrix2
goto lastrec()

vmean = 0 
vmean2 = 0
vmeancount = 0
select 2
do while c1 <= fcount()
   c2 = 1
   h1 = field(c1)
   select 1
   vm1 = &h1
   select 2
   do while c2 <= fcount()
      goto c1
      h2 = field(c2)
      h2a = &h2
      select 1
      vm2 = &h2
      select 3
      goto c1
      if (vm1 > 0 .and. vm2 > 0)
         h3 = (h2a / sqrt(vm1 * vm2))
      else 
         h3 = 0
      endif
      vmean = vmean + h3
      if h3 > 0
         vmean2 = vmean2 + h3
         vmeancount = vmeancount + 1
      endif
      if c1 = c2  && main diagonal
         h3 = 0   && set zero instead of one in order to avoid loops
      endif
      replace &h2 with h3
      select 2
      c2 = c2 + 1
   enddo
   c1 = c1 + 1
enddo
vmean = vmean/ (fcount() * (fcount() - 1)) 
vmean2 = vmean2/vmeancount

close data
delete file temp*.dbf
delete file wftem*.*

*** make files for Pajek

use coocc
delete file coocc.dat
set print on
set console off
set printer to coocc.dat
? "DL"
? "N=" + ltrim(str(lastrec()))
? "FORMAT = FULLMATRIX DIAGONAL PRESENT"
? "LABELS:"
use words
do while .not. eof()
   ? upper(substr(word,1,1)) + trim(lower(substr(word,2)))
   skip
enddo
use coocc
go top
? "DATA:"
do while .not. eof()
   c1 = 1
   vline = ""
   do while c1 <= fcount()
      h = field(c1)
      h2 = &h
      h2 = str(h2)
      vline = vline + ltrim(trim(h2)) + " "
      c1 = c1 + 1
   enddo
   ? vline
   skip
enddo
?
set print off

select 1
use cosine
delete file cosine.net
set print on
set printer to cosine.net
? "*Vertices " + ltrim(str(lastrec()))
use words
do while .not. eof()
   store word to vword
   store recno() to vrecno
   vword = trim(vword)
   vword1 = substr(vword,1,10)
   select 2
   use mtrxtmp
   h = field(vrecno)
   sum &h to vsum
   vsum = log(vsum)
   if (asc(substr(vword,1,1)) > 64 .and. asc(substr(vword,1,1)) < 128)
      ? ltrim(str(vrecno)) + ' "' + trim(vword) + '" '+"0.0 0.0 0.0 " +  " x_fact " + ltrim(str(vsum)) + " y_fact " + ltrim(str(vsum))
   else
      ? ltrim(str(vrecno)) + ' "' + trim(vword) + '" ' + "0.0 0.0 0.0 " + " x_fact " + ltrim(str(vsum)) + " y_fact " + ltrim(str(vsum))
   endif
   select 1
   skip
enddo

use cosine
go top
? "*Matrix "
do while .not. eof()
   c1 = 1
   vline = ""
   do while c1 <= fcount()
      h = field(c1)
      h2 = &h
      h2 = str(h2)
      vline = vline + ltrim(trim(h2)) + " "
      c1 = c1 + 1
   enddo
   ? vline
   skip
enddo
set print off
clear screen
@ 10,5 SAY "The mean of the cosine of the lower triangle is  :  " + ltrim(str(vmean,6,3))
@ 11,5 SAY "but when the zeros are not included (cosine > 0) :  " + ltrim(str(vmean2,6,3))
@ 13,5 SAY "Pearson's r = 0 for  " + ltrim(str(vegghe_min,6,3)) + " < cosine < " + ltrim(str(vegghe,6,3)) 
@ 14,5 SAY "(Egghe & Leydesdorff, JASIST, 2009.) "
@ 16,5

close data
return

*EOF()